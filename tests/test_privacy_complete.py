"""
Test Complet de la Vie Priv√©e - 5GHz Cleaner
V√©rifie que AUCUNE donn√©e utilisateur n'est collect√©e ou envoy√©e
"""
import sys
import os
import io

# Configurer l'encodage UTF-8
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_no_network_imports():
    """Test qu'aucune biblioth√®que r√©seau n'est import√©e"""
    print("\n" + "="*80)
    print("TEST 1: V√©rification des imports r√©seau")
    print("="*80)
    
    forbidden_imports = [
        'requests',
        'urllib',
        'http.client',
        'httplib',
        'aiohttp',
        'websocket',
    ]
    
    # Parcourir tous les fichiers Python
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    violations = []
    
    for root, dirs, files in os.walk(project_root):
        # Ignorer les dossiers de test et build
        if any(skip in root for skip in ['__pycache__', '.git', 'build', 'dist']):
            continue
            
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        for forbidden in forbidden_imports:
                            if f'import {forbidden}' in content or f'from {forbidden}' in content:
                                violations.append(f"{filepath}: {forbidden}")
                except:
                    pass
    
    if violations:
        print("‚ùå √âCHEC: Imports r√©seau d√©tect√©s:")
        for v in violations:
            print(f"  - {v}")
        return False
    else:
        print("‚úÖ SUCC√àS: Aucun import r√©seau d√©tect√©")
        return True


def test_no_external_connections():
    """Test qu'aucune connexion externe n'est √©tablie"""
    print("\n" + "="*80)
    print("TEST 2: V√©rification des connexions externes")
    print("="*80)
    
    # Rechercher socket.connect, socket.create_connection, etc.
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    violations = []
    
    suspicious_patterns = [
        'socket.connect(',
        'socket.create_connection(',
        '.connect(',
        'urlopen(',
        '.get(',
        '.post(',
    ]
    
    for root, dirs, files in os.walk(project_root):
        if any(skip in root for skip in ['__pycache__', '.git', 'build', 'dist', 'tests']):
            continue
            
        for file in files:
            if file.endswith('.py') and file != 'telemetry_checker.py':  # Exclure le checker lui-m√™me
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        for i, line in enumerate(lines, 1):
                            for pattern in suspicious_patterns:
                                if pattern in line and not line.strip().startswith('#'):
                                    violations.append(f"{filepath}:{i}: {line.strip()}")
                except:
                    pass
    
    if violations:
        print("‚ö†Ô∏è ATTENTION: Connexions potentielles d√©tect√©es:")
        for v in violations:
            print(f"  - {v}")
        # V√©rifier si ce sont de vraies violations
        real_violations = [v for v in violations if 'telemetry_checker' not in v]
        if real_violations:
            return False
    
    print("‚úÖ SUCC√àS: Aucune connexion externe dans le code principal")
    return True


def test_no_data_collection():
    """Test qu'aucune collecte de donn√©es n'est pr√©sente"""
    print("\n" + "="*80)
    print("TEST 3: V√©rification de la collecte de donn√©es")
    print("="*80)
    
    # Rechercher des patterns de collecte de donn√©es
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    violations = []
    
    suspicious_patterns = [
        'user_id',
        'tracking',
        'analytics',
        'mixpanel',
        'amplitude',
        'segment',
        'google-analytics',
        'ga(',
    ]
    
    for root, dirs, files in os.walk(project_root):
        if any(skip in root for skip in ['__pycache__', '.git', 'build', 'dist', 'tests']):
            continue
            
        for file in files:
            if file.endswith('.py') and file != 'telemetry_checker.py':
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read().lower()
                        for pattern in suspicious_patterns:
                            if pattern in content:
                                violations.append(f"{filepath}: {pattern}")
                except:
                    pass
    
    if violations:
        print("‚ö†Ô∏è ATTENTION: Patterns suspects d√©tect√©s:")
        for v in violations:
            print(f"  - {v}")
        return False
    
    print("‚úÖ SUCC√àS: Aucune collecte de donn√©es d√©tect√©e")
    return True


def test_no_personal_data_storage():
    """Test qu'aucune donn√©e personnelle n'est stock√©e"""
    print("\n" + "="*80)
    print("TEST 4: V√©rification du stockage de donn√©es personnelles")
    print("="*80)
    
    # V√©rifier qu'aucun fichier suspect n'existe
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    suspicious_files = [
        'user_data.json',
        'analytics.db',
        'telemetry.log',
        'tracking.db',
        'user_profile.json',
    ]
    
    found_files = []
    for root, dirs, files in os.walk(project_root):
        for file in files:
            if file.lower() in suspicious_files:
                found_files.append(os.path.join(root, file))
    
    if found_files:
        print("‚ùå √âCHEC: Fichiers suspects trouv√©s:")
        for f in found_files:
            print(f"  - {f}")
        return False
    
    print("‚úÖ SUCC√àS: Aucun fichier de donn√©es personnelles trouv√©")
    return True


def test_logs_privacy():
    """Test que les logs ne contiennent pas de donn√©es sensibles"""
    print("\n" + "="*80)
    print("TEST 5: V√©rification de la vie priv√©e dans les logs")
    print("="*80)
    
    # V√©rifier que le code de logging ne collecte pas de donn√©es sensibles
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    sensitive_patterns = [
        'username',
        'password',
        'email',
        'ip_address',
        'mac_address',
        'serial_number',
    ]
    
    violations = []
    for root, dirs, files in os.walk(project_root):
        if any(skip in root for skip in ['__pycache__', '.git', 'build', 'dist', 'tests']):
            continue
            
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        for i, line in enumerate(lines, 1):
                            if 'log' in line.lower():
                                for pattern in sensitive_patterns:
                                    if pattern in line.lower():
                                        violations.append(f"{filepath}:{i}: {line.strip()}")
                except:
                    pass
    
    if violations:
        print("‚ö†Ô∏è ATTENTION: Logging potentiel de donn√©es sensibles:")
        for v in violations:
            print(f"  - {v}")
        # V√©rifier si ce sont de vraies violations
        return len(violations) == 0
    
    print("‚úÖ SUCC√àS: Aucune donn√©e sensible dans les logs")
    return True


def test_privacy_policy_compliance():
    """Test que le code est conforme √† la politique de confidentialit√©"""
    print("\n" + "="*80)
    print("TEST 6: Conformit√© √† la politique de confidentialit√©")
    print("="*80)
    
    # V√©rifier que PRIVACY.md existe et contient les bonnes garanties
    privacy_file = os.path.join(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
        'PRIVACY.md'
    )
    
    if not os.path.exists(privacy_file):
        print("‚ùå √âCHEC: PRIVACY.md n'existe pas")
        return False
    
    with open(privacy_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    required_statements = [
        'Aucune donn√©e',
        't√©l√©m√©trie',
        'vie priv√©e',
        'local',
    ]
    
    missing = []
    for statement in required_statements:
        if statement.lower() not in content.lower():
            missing.append(statement)
    
    if missing:
        print("‚ùå √âCHEC: D√©clarations manquantes dans PRIVACY.md:")
        for m in missing:
            print(f"  - {m}")
        return False
    
    print("‚úÖ SUCC√àS: PRIVACY.md est conforme")
    return True


def run_all_privacy_tests():
    """Ex√©cute tous les tests de vie priv√©e"""
    print("\n")
    print("="*80)
    print("TEST COMPLET DE LA VIE PRIV√âE - 5GHz Cleaner")
    print("="*80)
    print()
    print("üîí NOTRE ENGAGEMENT: Respect absolu de la vie priv√©e")
    print("="*80)
    print()
    
    tests = [
        ("Imports r√©seau", test_no_network_imports),
        ("Connexions externes", test_no_external_connections),
        ("Collecte de donn√©es", test_no_data_collection),
        ("Stockage donn√©es personnelles", test_no_personal_data_storage),
        ("Vie priv√©e dans les logs", test_logs_privacy),
        ("Conformit√© politique confidentialit√©", test_privacy_policy_compliance),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"\n‚ùå EXCEPTION dans {test_name}: {e}")
            import traceback
            traceback.print_exc()
            results[test_name] = False
    
    # Rapport final
    print("\n")
    print("="*80)
    print("RAPPORT FINAL - VIE PRIV√âE")
    print("="*80)
    print()
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status}: {test_name}")
    
    print()
    print(f"R√©sultat global: {passed}/{total} tests r√©ussis")
    print()
    
    if passed == total:
        print("="*80)
        print("‚úÖ VIE PRIV√âE 100% RESPECT√âE")
        print("="*80)
        print()
        print("üîí GARANTIES:")
        print("  ‚úÖ Aucune connexion r√©seau")
        print("  ‚úÖ Aucune collecte de donn√©es")
        print("  ‚úÖ Aucune t√©l√©m√©trie")
        print("  ‚úÖ Aucun tracking")
        print("  ‚úÖ Traitement 100% local")
        print("  ‚úÖ Aucune donn√©e personnelle stock√©e")
        print()
        print("üéØ NOTRE POINT D'HONNEUR: RESPECT TOTAL DE LA VIE PRIV√âE")
        print("="*80)
        return 0
    else:
        print("="*80)
        print("‚ùå PROBL√àMES DE VIE PRIV√âE D√âTECT√âS")
        print("="*80)
        return 1


if __name__ == "__main__":
    sys.exit(run_all_privacy_tests())
