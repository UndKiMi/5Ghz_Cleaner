name: Build and Sign Windows Executable

on:
  push:
    tags:
      - 'v*'  # D√©clench√© sur les tags de version (v1.0.0, v1.1.0, etc.)
  workflow_dispatch:  # Permet le d√©clenchement manuel

jobs:
  build-and-sign:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Run security checks
      run: |
        echo "Running telemetry verification..."
        python backend/telemetry_checker.py
        
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --name "5Ghz_Cleaner" ^
                    --onefile ^
                    --windowed ^
                    --icon="icon's/icon.ico" ^
                    --add-data "backend;backend" ^
                    --add-data "frontend;frontend" ^
                    --add-data "assets;assets" ^
                    main.py
      shell: cmd
      
    - name: Decode certificate
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "${{ secrets.CERTIFICATE_BASE64 }}" | base64 --decode > certificate.pfx
      shell: bash
      
    - name: Sign executable
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        # Installer Windows SDK pour signtool
        choco install windows-sdk-10-version-2004-all
        
        # Signer l'ex√©cutable
        & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign `
          /f certificate.pfx `
          /p "${{ secrets.CERTIFICATE_PASSWORD }}" `
          /t http://timestamp.digicert.com `
          /fd SHA256 `
          /v `
          dist\5Ghz_Cleaner.exe
      shell: pwsh
      
    - name: Verify signature
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" verify `
          /pa `
          /v `
          dist\5Ghz_Cleaner.exe
      shell: pwsh
      
    - name: Generate checksums
      run: |
        python generate_checksum.py
        
    - name: Create release artifacts
      run: |
        mkdir release
        copy dist\5Ghz_Cleaner.exe release\
        copy dist\CHECKSUMS.txt release\
        copy dist\CHECKSUMS.json release\
        copy README.md release\
        copy LICENSE release\
      shell: cmd
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 5Ghz_Cleaner-${{ github.ref_name }}
        path: release/
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/5Ghz_Cleaner.exe
          release/CHECKSUMS.txt
          release/CHECKSUMS.json
        body: |
          ## 5GH'z Cleaner ${{ github.ref_name }}
          
          ### üîí S√©curit√©
          - ‚úÖ Ex√©cutable sign√© num√©riquement
          - ‚úÖ Checksums SHA256 fournis
          - ‚úÖ Aucune t√©l√©m√©trie
          - ‚úÖ Code source open-source
          
          ### üìã V√©rification d'int√©grit√©
          
          Avant d'ex√©cuter, v√©rifiez le checksum SHA256:
          
          ```powershell
          Get-FileHash -Algorithm SHA256 5Ghz_Cleaner.exe
          ```
          
          Comparez avec le fichier `CHECKSUMS.txt` fourni.
          
          ### üì¶ Installation
          
          1. T√©l√©chargez `5Ghz_Cleaner.exe`
          2. V√©rifiez le checksum SHA256
          3. V√©rifiez la signature num√©rique (clic droit > Propri√©t√©s > Signatures num√©riques)
          4. Ex√©cutez en tant qu'administrateur pour un nettoyage complet
          
          ### üõ°Ô∏è Rapport de s√©curit√©
          
          Voir [SECURITY.md](https://github.com/${{ github.repository }}/blob/main/SECURITY.md)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup certificate
      if: always()
      run: |
        if (Test-Path certificate.pfx) {
          Remove-Item certificate.pfx -Force
        }
      shell: pwsh
