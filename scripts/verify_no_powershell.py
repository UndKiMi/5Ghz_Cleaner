"""
Script de v√©rification - Aucune ex√©cution PowerShell
V√©rifie qu'aucune commande PowerShell n'est ex√©cut√©e dans le code
"""
import os
import sys
import io
import re

# Configurer l'encodage UTF-8 pour Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

def check_powershell_execution():
    """V√©rifie qu'aucune ex√©cution PowerShell n'est pr√©sente"""
    print("="*80)
    print("V√âRIFICATION: Aucune ex√©cution PowerShell")
    print("="*80)
    print()
    
    # Patterns dangereux
    dangerous_patterns = [
        (r'subprocess.*powershell', 'subprocess avec powershell'),
        (r'Popen.*powershell', 'Popen avec powershell'),
        (r'\.run\(.*powershell', '.run() avec powershell'),
        (r'os\.system.*powershell', 'os.system avec powershell'),
        (r'shell=True.*powershell', 'shell=True avec powershell'),
    ]
    
    violations = []
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    # Parcourir tous les fichiers Python
    for root, dirs, files in os.walk(project_root):
        # Ignorer les dossiers de test, build, etc.
        if any(skip in root for skip in ['__pycache__', '.git', 'build', 'dist', 'tests', 'scripts']):
            continue
        
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        for i, line in enumerate(lines, 1):
                            # Ignorer les commentaires
                            if line.strip().startswith('#'):
                                continue
                            
                            # V√©rifier les patterns dangereux
                            for pattern, description in dangerous_patterns:
                                if re.search(pattern, line, re.IGNORECASE):
                                    violations.append({
                                        'file': filepath,
                                        'line': i,
                                        'content': line.strip(),
                                        'type': description
                                    })
                except:
                    pass
    
    # Afficher les r√©sultats
    if violations:
        print("‚ùå √âCHEC: Ex√©cutions PowerShell d√©tect√©es!")
        print()
        for v in violations:
            print(f"Fichier: {v['file']}")
            print(f"Ligne {v['line']}: {v['content']}")
            print(f"Type: {v['type']}")
            print()
        return False
    else:
        print("‚úÖ SUCC√àS: Aucune ex√©cution PowerShell d√©tect√©e")
        print()
        print("V√©rifications effectu√©es:")
        print("  ‚úì subprocess.* + powershell")
        print("  ‚úì Popen.* + powershell")
        print("  ‚úì .run() + powershell")
        print("  ‚úì os.system + powershell")
        print("  ‚úì shell=True + powershell")
        print()
        print("Note: Les commentaires mentionnant PowerShell sont OK")
        print("      (ils expliquent qu'on utilise les API natives √Ä LA PLACE)")
        return True


def check_safe_comments():
    """V√©rifie que les commentaires PowerShell sont s√©curitaires"""
    print()
    print("="*80)
    print("V√âRIFICATION: Commentaires PowerShell (informatifs uniquement)")
    print("="*80)
    print()
    
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    comments = []
    
    for root, dirs, files in os.walk(project_root):
        if any(skip in root for skip in ['__pycache__', '.git', 'build', 'dist', 'tests', 'scripts']):
            continue
        
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        for i, line in enumerate(lines, 1):
                            if line.strip().startswith('#') and 'powershell' in line.lower():
                                comments.append({
                                    'file': os.path.basename(filepath),
                                    'line': i,
                                    'content': line.strip()
                                })
                except:
                    pass
    
    if comments:
        print(f"‚ÑπÔ∏è  Trouv√© {len(comments)} commentaires mentionnant PowerShell:")
        print()
        for c in comments[:5]:  # Afficher les 5 premiers
            print(f"  {c['file']}:{c['line']}")
            print(f"    {c['content']}")
            print()
        
        if len(comments) > 5:
            print(f"  ... et {len(comments) - 5} autres")
            print()
        
        print("‚úÖ Ces commentaires sont S√âCURITAIRES")
        print("   Ils expliquent qu'on utilise les API natives Windows")
        print("   AU LIEU DE PowerShell (pour la s√©curit√©)")
    else:
        print("‚ÑπÔ∏è  Aucun commentaire PowerShell trouv√©")
    
    return True


if __name__ == "__main__":
    print()
    print("="*80)
    print("AUDIT DE S√âCURIT√â: V√©rification PowerShell")
    print("="*80)
    print()
    
    # Test 1: Aucune ex√©cution PowerShell
    test1 = check_powershell_execution()
    
    # Test 2: Commentaires informatifs
    test2 = check_safe_comments()
    
    # R√©sultat final
    print()
    print("="*80)
    print("R√âSULTAT FINAL")
    print("="*80)
    print()
    
    if test1 and test2:
        print("‚úÖ AUDIT R√âUSSI: Aucune ex√©cution PowerShell")
        print()
        print("üîí GARANTIE:")
        print("   - 0 ex√©cution PowerShell dans le code")
        print("   - 100% API natives Windows")
        print("   - Commentaires informatifs uniquement")
        print()
        sys.exit(0)
    else:
        print("‚ùå AUDIT √âCHOU√â: Probl√®mes d√©tect√©s")
        sys.exit(1)
